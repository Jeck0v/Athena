// Modern E-commerce Platform - Production-ready with enhanced features
DEPLOYMENT-ID MODERN_ECOMMERCE
VERSION-ID 2.0.0

ENVIRONMENT SECTION
NETWORK-NAME ecommerce_network
// TODO: In Swarm mode, network will use overlay driver automatically
// For now: bridge driver (compose), overlay driver (swarm deploy)
// Define persistent volumes for production
VOLUME postgres_data
VOLUME redis_data
// Secrets management for production
SECRET jwt_secret "use Docker secrets in production"
SECRET postgres_password "use Docker secrets in production"

SERVICES SECTION

// Reverse proxy with SSL termination - Only exposed service in production
SERVICE nginx_reverse_proxy
IMAGE-ID "nginx:alpine"
PORT-MAPPING 80 TO 80
PORT-MAPPING 443 TO 443
VOLUME-MAPPING "./nginx/conf.d" TO "/etc/nginx/conf.d" (ro)
RESOURCE-LIMITS CPU "0.2" MEMORY "256M"
DEPENDS-ON api_gateway
HEALTH-CHECK "curl -f http://localhost:80/health || exit 1"
// Athena auto-applies: restart=always for proxy type
END SERVICE

// API Gateway - Internal only, stateless and scalable
SERVICE api_gateway
BUILD-ARGS NODE_ENV="production" API_VERSION="v2.1" JWT_EXPIRY="24h"
// No PORT-MAPPING for production - only internal network access
ENV-VARIABLE {{JWT_SECRET}}
ENV-VARIABLE {{DATABASE_URL}}
ENV-VARIABLE {{REDIS_URL}}
RESOURCE-LIMITS CPU "0.5" MEMORY "512M"
DEPENDS-ON database
DEPENDS-ON cache
HEALTH-CHECK "curl -f http://localhost:3000/health || exit 1"
// Athena auto-applies: restart=unless-stopped for webapp type
// TODO: Add replicas: 3 for load balancing when Athena supports it
END SERVICE

// Product catalog service - Stateless, horizontally scalable
SERVICE product_service
BUILD-ARGS CATALOG_VERSION="v1.5" SEARCH_ENGINE="elasticsearch"
// No PORT-MAPPING for production - internal access only
ENV-VARIABLE {{DATABASE_URL}}
RESOURCE-LIMITS CPU "0.3" MEMORY "256M"
DEPENDS-ON database
HEALTH-CHECK "curl -f http://localhost:3000/health || exit 1"
// TODO: Add replicas: 2 for high availability when Athena supports it
END SERVICE

// User authentication service - Stateless, scalable microservice
SERVICE auth_service
BUILD-ARGS AUTH_PROVIDER="oauth2" SESSION_TIMEOUT="1h"
// No PORT-MAPPING for production - internal access only
ENV-VARIABLE {{JWT_SECRET}}
ENV-VARIABLE {{DATABASE_URL}}
RESOURCE-LIMITS CPU "0.2" MEMORY "256M"
DEPENDS-ON database
HEALTH-CHECK "curl -f http://localhost:3000/health || exit 1"
// TODO: Add replicas: 2 for authentication redundancy when Athena supports it
END SERVICE

// Main database - PRODUCTION: No external ports, internal network only
SERVICE database
IMAGE-ID "postgres:15"
// No PORT-MAPPING in production - internal network communication only
// Use 'docker exec' or port forwarding for debugging if needed
ENV-VARIABLE {{POSTGRES_USER}}
ENV-VARIABLE {{POSTGRES_PASSWORD}}
ENV-VARIABLE {{POSTGRES_DB}}
// Using named volume for production persistence
VOLUME-MAPPING "postgres_data" TO "/var/lib/postgresql/data"
RESOURCE-LIMITS CPU "1.0" MEMORY "1024M"
HEALTH-CHECK "pg_isready -U ${POSTGRES_USER} || exit 1"
// Athena auto-applies: restart=always for database type
// TODO: Add replicas: 1 for database (single master) when Athena supports it
END SERVICE

// Redis cache - PRODUCTION: No external ports, internal network only
SERVICE cache
IMAGE-ID "redis:7-alpine"
/* No PORT-MAPPING in production - internal network communication only
Use 'docker exec' or port forwarding for debugging if needed
Using named volume for production persistence */
VOLUME-MAPPING "redis_data" TO "/data"
RESOURCE-LIMITS CPU "0.3" MEMORY "512M"
HEALTH-CHECK "redis-cli ping || exit 1"
// Athena auto-applies: restart=always for cache type
// TODO: Add replicas: 1 for cache (single instance) when Athena supports it
END SERVICE

// Monitoring service - Independent scraping configuration
SERVICE monitoring
IMAGE-ID "prom/prometheus:latest"
PORT-MAPPING 9090 TO 9090
VOLUME-MAPPING "./prometheus/prometheus.yml" TO "/etc/prometheus/prometheus.yml" (ro)
// No DEPENDS-ON - Prometheus handles service discovery and scraping independently
// Configure prometheus.yml to scrape targets via service names
RESOURCE-LIMITS CPU "0.3" MEMORY "512M"
// TODO: Add replicas: 2 for HA monitoring when Athena supports it
END SERVICE
