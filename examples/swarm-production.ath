// Production-Ready Docker Swarm Stack - Complete Example
// Demonstrates all new Swarm features with best practices

DEPLOYMENT-ID PRODUCTION_SWARM
VERSION-ID 3.0.0

ENVIRONMENT SECTION
// Production overlay network with security
NETWORK-NAME production_overlay DRIVER OVERLAY ATTACHABLE TRUE ENCRYPTED TRUE

SERVICES SECTION

// Load Balancer / Reverse Proxy - High Availability
SERVICE nginx_proxy
IMAGE-ID nginx:alpine
PORT-MAPPING 80 TO 80
PORT-MAPPING 443 TO 443
VOLUME-MAPPING "./nginx/conf.d" TO "/etc/nginx/conf.d" (ro)
REPLICAS 2
UPDATE-CONFIG PARALLELISM 1 DELAY 30s FAILURE-ACTION ROLLBACK MONITOR 60s
SWARM-LABELS tier="proxy" environment="production" critical="true"
DEPENDS-ON api_gateway
RESOURCE-LIMITS CPU "0.5" MEMORY "512M"
HEALTH-CHECK "curl -f http://localhost/health || exit 1"
END SERVICE

// API Gateway - Scalable Entry Point
SERVICE api_gateway
BUILD-ARGS NODE_ENV="production" API_VERSION="v3.0" RATE_LIMIT="1000"
PORT-MAPPING 3000 TO 3000
ENV-VARIABLE {{JWT_SECRET}}
ENV-VARIABLE {{API_RATE_LIMIT}}
REPLICAS 5
UPDATE-CONFIG PARALLELISM 2 DELAY 15s FAILURE-ACTION PAUSE MAX-FAILURE-RATIO 0.1
SWARM-LABELS tier="api" environment="production" scaling="auto"
DEPENDS-ON user_service
DEPENDS-ON order_service
DEPENDS-ON notification_service
RESOURCE-LIMITS CPU "1.0" MEMORY "1024M"
HEALTH-CHECK "curl -f http://localhost:3000/health || exit 1"
END SERVICE

// User Management Service - Backend Microservice
SERVICE user_service
BUILD-ARGS PYTHON_VERSION="3.11" DJANGO_VERSION="4.2"
ENV-VARIABLE {{DATABASE_URL}}
ENV-VARIABLE {{REDIS_URL}}
REPLICAS 3
UPDATE-CONFIG PARALLELISM 1 DELAY 20s FAILURE-ACTION ROLLBACK
SWARM-LABELS tier="backend" service="users" environment="production"
DEPENDS-ON postgres_primary
DEPENDS-ON redis_cache
RESOURCE-LIMITS CPU "0.8" MEMORY "768M"
HEALTH-CHECK "python manage.py health_check"
END SERVICE

// Order Processing Service - Critical Business Logic
SERVICE order_service
BUILD-ARGS JAVA_VERSION="17" SPRING_VERSION="3.0"
ENV-VARIABLE {{DATABASE_URL}}
ENV-VARIABLE {{PAYMENT_API_KEY}}
REPLICAS 4
UPDATE-CONFIG PARALLELISM 2 DELAY 25s FAILURE-ACTION ROLLBACK MONITOR 120s MAX-FAILURE-RATIO 0.2
SWARM-LABELS tier="backend" service="orders" environment="production" critical="true"
DEPENDS-ON postgres_primary
DEPENDS-ON rabbitmq
RESOURCE-LIMITS CPU "1.2" MEMORY "1536M"
HEALTH-CHECK "curl -f http://localhost:8080/actuator/health || exit 1"
END SERVICE

// Notification Service - Event-Driven Communication
SERVICE notification_service
BUILD-ARGS NODE_VERSION="18" REDIS_VERSION="7"
ENV-VARIABLE {{SMTP_CONFIG}}
ENV-VARIABLE {{REDIS_URL}}
REPLICAS 2
UPDATE-CONFIG PARALLELISM 1 DELAY 10s FAILURE-ACTION CONTINUE
SWARM-LABELS tier="backend" service="notifications" environment="production"
DEPENDS-ON redis_cache
DEPENDS-ON rabbitmq
RESOURCE-LIMITS CPU "0.5" MEMORY "512M"
HEALTH-CHECK "node health_check.js"
END SERVICE

// Primary Database - Single Master with Replication
SERVICE postgres_primary
IMAGE-ID postgres:15-alpine
ENV-VARIABLE {{POSTGRES_USER}}
ENV-VARIABLE {{POSTGRES_PASSWORD}}
ENV-VARIABLE {{POSTGRES_DB}}
VOLUME-MAPPING "postgres_data" TO "/var/lib/postgresql/data"
REPLICAS 1
UPDATE-CONFIG PARALLELISM 1 DELAY 60s FAILURE-ACTION PAUSE
SWARM-LABELS tier="data" role="primary" environment="production" critical="true"
RESOURCE-LIMITS CPU "2.0" MEMORY "4096M"
HEALTH-CHECK "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
END SERVICE

// Redis Cache - Memory Store
SERVICE redis_cache
IMAGE-ID redis:7-alpine
VOLUME-MAPPING "redis_data" TO "/data"
REPLICAS 1
UPDATE-CONFIG PARALLELISM 1 DELAY 30s FAILURE-ACTION ROLLBACK
SWARM-LABELS tier="cache" environment="production"
RESOURCE-LIMITS CPU "1.0" MEMORY "2048M"
HEALTH-CHECK "redis-cli ping"
END SERVICE

// Message Queue - Event Processing
SERVICE rabbitmq
IMAGE-ID rabbitmq:3.12-management-alpine
ENV-VARIABLE {{RABBITMQ_DEFAULT_USER}}
ENV-VARIABLE {{RABBITMQ_DEFAULT_PASS}}
VOLUME-MAPPING "rabbitmq_data" TO "/var/lib/rabbitmq"
REPLICAS 1
UPDATE-CONFIG PARALLELISM 1 DELAY 45s FAILURE-ACTION PAUSE
SWARM-LABELS tier="messaging" environment="production"
RESOURCE-LIMITS CPU "0.8" MEMORY "1024M"
HEALTH-CHECK "rabbitmq-diagnostics ping"
END SERVICE

// Monitoring Stack - Prometheus
SERVICE prometheus
IMAGE-ID prom/prometheus:latest
PORT-MAPPING 9090 TO 9090
VOLUME-MAPPING "./prometheus/prometheus.yml" TO "/etc/prometheus/prometheus.yml" (ro)
REPLICAS 2
UPDATE-CONFIG PARALLELISM 1 DELAY 30s
SWARM-LABELS tier="monitoring" environment="production"
RESOURCE-LIMITS CPU "1.0" MEMORY "2048M"
HEALTH-CHECK "curl -f http://localhost:9090/-/healthy || exit 1"
END SERVICE